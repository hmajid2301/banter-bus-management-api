image: python:3.9.8

variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  PIP_DOWNLOAD_DIR: ".pip"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  BANTER_BUS_MANAGEMENT_API_DB_USERNAME: banterbus
  BANTER_BUS_MANAGEMENT_API_DB_PASSWORD: banterbus
  BANTER_BUS_MANAGEMENT_API_DB_HOST: banter-bus-database
  BANTER_BUS_MANAGEMENT_API_DB_PORT: 27017
  BANTER_BUS_MANAGEMENT_API_DB_NAME: test
  BANTER_BUS_MANAGEMENT_API_CLIENT_ID: client_id
  BANTER_BUS_MANAGEMENT_API_USE_AUTH: "False"

cache:
  key: "${CI_COMMIT_SHA}"
  paths:
    - .cache/pip
    - .venv

.mongo:
  services:
    - name: mongo:4.4.4
      alias: banter-bus-database
  variables:
    MONGO_INITDB_ROOT_USERNAME: banterbus
    MONGO_INITDB_ROOT_PASSWORD: banterbus
    MONGO_INITDB_DATABASE: test

.management_api:
  services:
    - name: registry.gitlab.com/banter-bus/banter-bus-management-api:test
      alias: banter-bus-management-api
    - name: registry.gitlab.com/banter-bus/banter-bus-management-api/database-seed:latest
      alias: banter-bus-database-seed
  variables:
    MONGO_HOSTNAME: banter-bus-database:27017
    FF_NETWORK_PER_BUILD: 1

stages:
  - pre
  - test
  - pre-publish
  - publish

before_script:
  - pip download --dest=${PIP_DOWNLOAD_DIR} poetry
  - pip install --find-links=${PIP_DOWNLOAD_DIR} poetry
  - poetry config virtualenvs.in-project true
  - poetry install -vv

publish:docker-test:
  stage: pre
  only:
    - main
  image: docker
  services:
    - docker:dind
  before_script: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile --target production -t ${CI_REGISTRY_IMAGE}:test .
    - docker push ${CI_REGISTRY_IMAGE}:test

publish-docker:seed:
  stage: pre
  image: docker
  only:
    - main
  services:
    - docker:dind
  before_script: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f db/Dockerfile -t ${CI_REGISTRY_IMAGE}/database-seed .
    - docker push ${CI_REGISTRY_IMAGE}/database-seed

test:lint:
  stage: test
  only:
    - merge_request
  script:
    - make lint

test:unit-tests:
  stage: test
  only:
    - merge_request
  script:
    - make unit_tests

test:coverage:
  stage: test
  only:
    - main
    - merge_request
  extends:
    - .mongo
  script:
    - make coverage
  coverage: '/^TOTAL.+?(\S+\%)$/'
  artifacts:
    when: always
    reports:
      junit: report.xml
      cobertura: coverage.xml

test:integration-tests:
  stage: test
  only:
    - merge_request
  extends:
    - .mongo
  script:
    - make integration_tests

verify:test-contract:
  stage: pre-publish
  image:
    name: pactfoundation/pact-cli:latest
    entrypoint: [""]
  only:
    - main
  services:
    - !reference [.mongo, services]
    - !reference [.management_api, services]
  extends:
    - .mongo
    - .management_api
  variables:
    BANTER_BUS_MANAGEMENT_API_URL: http://banter-bus-management-api
    BANTER_BUS_MANAGEMENT_API_PORT: 8080
  before_script: []
  script:
    - |
      pact verify --pact-broker-base-url 'https://banterbus.pactflow.io' --provider management_api \
      --broker-token ${BROKER_TOKEN} --provider-app-version ${MANAGEMENT_API_VERSION} \
      --provider-base-url "${BANTER_BUS_MANAGEMENT_API_URL}:${BANTER_BUS_MANAGEMENT_API_PORT}" --publish-verification-results

edit:service-yaml:
  stage: pre-publish
  image:
    name: mikefarah/yq
    entrypoint: [""]
  only:
    - main
  before_script: []
  script:
    - export RANDOM_NAME=$(echo $RANDOM | md5sum | head -c 8; echo)
    - export RANDOM_STR="banter-bus-management-api-$RANDOM_NAME"
    - yq -i e ".spec.template.metadata.name = \"$RANDOM_STR\"" service.yaml
  artifacts:
    paths:
      - service.yaml

publish:cloud-run:
  stage: publish
  services:
    - docker:dind
  image: google/cloud-sdk
  dependencies:
    - publish:docker-test
    - edit:service-yaml
  only:
    - main
  before_script: []
  script:
    - cat $GCP_CLOUD_BUILD_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io
    - gcloud auth activate-service-account --key-file $GCP_CLOUD_BUILD_KEY
    - gcloud config set project banter-bus
    - docker pull ${CI_REGISTRY_IMAGE}:test
    - docker tag ${CI_REGISTRY_IMAGE}:test eu.gcr.io/$GCP_PROJECT_ID/banter-bus-management-api
    - docker push eu.gcr.io/$GCP_PROJECT_ID/banter-bus-management-api
    - gcloud run services replace --platform=managed service.yaml
