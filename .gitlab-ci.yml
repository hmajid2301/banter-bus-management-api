image: python:3.9.8

variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  PIP_DOWNLOAD_DIR: ".pip"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .cache/pip
    - .venv

.mongo:
  services:
    - name: mongo:4.4.4
      alias: banter-bus-database
  variables:
    MONGO_INITDB_ROOT_USERNAME: banterbus
    MONGO_INITDB_ROOT_PASSWORD: banterbus
    MONGO_INITDB_DATABASE: test
    BANTER_BUS_MANAGEMENT_API_DB_USERNAME: banterbus
    BANTER_BUS_MANAGEMENT_API_DB_PASSWORD: banterbus
    BANTER_BUS_MANAGEMENT_API_DB_HOST: banter-bus-database
    BANTER_BUS_MANAGEMENT_API_DB_PORT: 27017
    BANTER_BUS_MANAGEMENT_API_DB_NAME: test
    BANTER_BUS_MANAGEMENT_API_AUTH0_DOMAIN: domain
    BANTER_BUS_MANAGEMENT_API_AUTH0_CUSTOM_API: custom-api

stages:
  - pre
  - publish
  - test

before_script:
  - pip download --dest=${PIP_DOWNLOAD_DIR} poetry
  - pip install --find-links=${PIP_DOWNLOAD_DIR} poetry
  - poetry config virtualenvs.in-project true
  - poetry install -vv

test:lint:
  stage: test
  only:
    - merge_request
  script:
    - make lint

test:unit-tests:
  stage: test
  only:
    - merge_request
  script:
    - make unit_tests

test:coverage:
  stage: test
  only:
    - main
    - merge_request
  extends:
    - .mongo
  script:
    - make coverage
  coverage: '/^TOTAL.+?(\S+\%)$/'
  artifacts:
    when: always
    reports:
      junit: report.xml
      cobertura: coverage.xml

test:integration-tests:
  stage: test
  only:
    - merge_request
  extends:
    - .mongo
  script:
    - make integration_tests

publish-docker:test:
  stage: publish
  only:
    - main
  image: docker
  services:
    - docker:dind
  before_script: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile -t ${CI_REGISTRY_IMAGE}:test --target production .
    - docker push ${CI_REGISTRY_IMAGE}:test

publish-docker:seed:
  stage: publish
  image: docker
  only:
    - main
  services:
    - docker:dind
  before_script: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f db/Dockerfile -t ${CI_REGISTRY_IMAGE}/database-seed .
    - docker push ${CI_REGISTRY_IMAGE}/database-seed

publish:cloud-run:
  stage: publish
  services:
    - docker:dind
  image: google/cloud-sdk
  only:
    - main
  before_script: []
  script:
    - cat $GCP_CLOUD_BUILD_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io
    - gcloud auth activate-service-account --key-file $GCP_CLOUD_BUILD_KEY
    - gcloud config set project banter-bus
    - docker build -f Dockerfile -t eu.gcr.io/$GCP_PROJECT_ID/banter-bus-management-api --target production .
    - docker push eu.gcr.io/$GCP_PROJECT_ID/banter-bus-management-api
    - gcloud run deploy banter-bus-management-api --image eu.gcr.io/$GCP_PROJECT_ID/banter-bus-management-api --region europe-west1 --platform managed --allow-unauthenticated
